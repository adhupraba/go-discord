name: Deploy Discord Client

on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths:
      - client/**
      - .github/workflows/client.yaml
      - .github/actions/prepare-env/action.yaml
      - docker-compose.prod.yaml

jobs:
  client-build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        architecture: [amd64, arm64]

    env:
      IMAGE_NAME: "${{ secrets.DOCKERHUB_USERNAME }}/discord-client"

    steps:
      - name: Check architecture
        run: |
          echo ${{ runner.os }} ${{ matrix.architecture }}
          uname -m

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          file: ./client/dockerfile.prod.client
          context: client
          platforms: linux/${{ matrix.architecture }}
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ matrix.architecture }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:${{ matrix.architecture }}-cache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:${{ matrix.architecture }}-cache,mode=max

      - name: Remove Docker Manifest
        run: |
          docker manifest rm ${{ env.IMAGE_NAME }}:${{ matrix.architecture }} || true
          docker manifest rm ${{ env.IMAGE_NAME }} || true

  client-manifest:
    needs: client-build
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: "${{ secrets.DOCKERHUB_USERNAME }}/discord-client"

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and Push Multi-Arch Manifest
        run: |
          docker manifest create ${{ env.IMAGE_NAME }}:latest ${{ env.IMAGE_NAME }}:amd64 ${{ env.IMAGE_NAME }}:arm64
          docker manifest push ${{ env.IMAGE_NAME }}:latest

  client-deploy:
    needs: client-manifest
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: "${{ secrets.DOCKERHUB_USERNAME }}/discord-client"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Prepare .env
        uses: ./.github/actions/prepare-env
        with:
          env_file_path: .env.client
          secrets_json: |
            {
              \"PORT\": \"${{ secrets.CLIENT_PORT }}\",
              \"NODE_ENV\": \"${{ secrets.ENV }}\",
              \"NEXT_PUBLIC_WS_URL\": \"${{ secrets.CLIENT_NEXT_PUBLIC_WS_URL }}\",
              \"NEXT_PUBLIC_API_URL\": \"${{ secrets.CLIENT_NEXT_PUBLIC_API_URL }}\",
              \"API_URL\": \"${{ secrets.CLIENT_API_URL }}\",
              \"NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY\": \"${{ secrets.CLIENT_NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}\",
              \"NEXT_PUBLIC_CLERK_SIGN_IN_URL\": \"${{ secrets.CLIENT_NEXT_PUBLIC_CLERK_SIGN_IN_URL }}\",
              \"NEXT_PUBLIC_CLERK_SIGN_UP_URL\": \"${{ secrets.CLIENT_NEXT_PUBLIC_CLERK_SIGN_UP_URL }}\",
              \"NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL\": \"${{ secrets.CLIENT_NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL }}\",
              \"NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL\": \"${{ secrets.CLIENT_NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL }}\",
              \"CLERK_SECRET_KEY\": \"${{ secrets.CLIENT_CLERK_SECRET_KEY }}\",
              \"UPLOADTHING_SECRET\": \"${{ secrets.CLIENT_UPLOADTHING_SECRET }}\",
              \"UPLOADTHING_APP_ID\": \"${{ secrets.CLIENT_UPLOADTHING_APP_ID }}\",
              \"LIVEKIT_API_KEY\": \"${{ secrets.CLIENT_LIVEKIT_API_KEY }}\",
              \"LIVEKIT_API_SECRET\": \"${{ secrets.CLIENT_LIVEKIT_API_SECRET }}\",
              \"NEXT_PUBLIC_LIVEKIT_URL\": \"${{ secrets.CLIENT_NEXT_PUBLIC_LIVEKIT_URL }}\",
            }

      - name: Sync code to server
        uses: appleboy/scp-action@v0.1.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ${{ secrets.SERVER_SSH_KEY_PASSPHRASE }}
          source: ./docker-compose.prod.yaml,./.env.client
          target: /home/${{ secrets.SERVER_USER }}/discord/

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ${{ secrets.SERVER_SSH_KEY_PASSPHRASE }}
          script: |
            cd /home/${{ secrets.SERVER_USER }}/discord
            docker pull ${{ env.IMAGE_NAME }}:latest
            docker compose -f docker-compose.prod.yaml stop client
            docker compose -f docker-compose.prod.yaml rm -f client
            docker compose -f docker-compose.prod.yaml up -d client
